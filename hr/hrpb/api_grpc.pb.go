// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: hrpb/api.proto

package hrpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HrService_CreateEmployee_FullMethodName    = "/hrpb.HrService/CreateEmployee"
	HrService_CreateDepartment_FullMethodName  = "/hrpb.HrService/CreateDepartment"
	HrService_SuspendEmployee_FullMethodName   = "/hrpb.HrService/SuspendEmployee"
	HrService_SackEmployee_FullMethodName      = "/hrpb.HrService/SackEmployee"
	HrService_UnsuspendEmployee_FullMethodName = "/hrpb.HrService/UnsuspendEmployee"
	HrService_GetEmployeeById_FullMethodName   = "/hrpb.HrService/GetEmployeeById"
)

// HrServiceClient is the client API for HrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HrServiceClient interface {
	CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...grpc.CallOption) (*CreateEmployeeResponse, error)
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentResponse, error)
	SuspendEmployee(ctx context.Context, in *SuspendEmployeeRequest, opts ...grpc.CallOption) (*SuspendEmployeeResponse, error)
	SackEmployee(ctx context.Context, in *SackEmployeeRequest, opts ...grpc.CallOption) (*SackEmployeeResponse, error)
	UnsuspendEmployee(ctx context.Context, in *UnsuspendEmployeeRequest, opts ...grpc.CallOption) (*UnsuspendEmployeeResponse, error)
	GetEmployeeById(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*GetEmployeeResponse, error)
}

type hrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHrServiceClient(cc grpc.ClientConnInterface) HrServiceClient {
	return &hrServiceClient{cc}
}

func (c *hrServiceClient) CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...grpc.CallOption) (*CreateEmployeeResponse, error) {
	out := new(CreateEmployeeResponse)
	err := c.cc.Invoke(ctx, HrService_CreateEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentResponse, error) {
	out := new(CreateDepartmentResponse)
	err := c.cc.Invoke(ctx, HrService_CreateDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SuspendEmployee(ctx context.Context, in *SuspendEmployeeRequest, opts ...grpc.CallOption) (*SuspendEmployeeResponse, error) {
	out := new(SuspendEmployeeResponse)
	err := c.cc.Invoke(ctx, HrService_SuspendEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SackEmployee(ctx context.Context, in *SackEmployeeRequest, opts ...grpc.CallOption) (*SackEmployeeResponse, error) {
	out := new(SackEmployeeResponse)
	err := c.cc.Invoke(ctx, HrService_SackEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) UnsuspendEmployee(ctx context.Context, in *UnsuspendEmployeeRequest, opts ...grpc.CallOption) (*UnsuspendEmployeeResponse, error) {
	out := new(UnsuspendEmployeeResponse)
	err := c.cc.Invoke(ctx, HrService_UnsuspendEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetEmployeeById(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*GetEmployeeResponse, error) {
	out := new(GetEmployeeResponse)
	err := c.cc.Invoke(ctx, HrService_GetEmployeeById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HrServiceServer is the server API for HrService service.
// All implementations must embed UnimplementedHrServiceServer
// for forward compatibility
type HrServiceServer interface {
	CreateEmployee(context.Context, *CreateEmployeeRequest) (*CreateEmployeeResponse, error)
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error)
	SuspendEmployee(context.Context, *SuspendEmployeeRequest) (*SuspendEmployeeResponse, error)
	SackEmployee(context.Context, *SackEmployeeRequest) (*SackEmployeeResponse, error)
	UnsuspendEmployee(context.Context, *UnsuspendEmployeeRequest) (*UnsuspendEmployeeResponse, error)
	GetEmployeeById(context.Context, *GetEmployeeRequest) (*GetEmployeeResponse, error)
	mustEmbedUnimplementedHrServiceServer()
}

// UnimplementedHrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHrServiceServer struct {
}

func (UnimplementedHrServiceServer) CreateEmployee(context.Context, *CreateEmployeeRequest) (*CreateEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedHrServiceServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedHrServiceServer) SuspendEmployee(context.Context, *SuspendEmployeeRequest) (*SuspendEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendEmployee not implemented")
}
func (UnimplementedHrServiceServer) SackEmployee(context.Context, *SackEmployeeRequest) (*SackEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SackEmployee not implemented")
}
func (UnimplementedHrServiceServer) UnsuspendEmployee(context.Context, *UnsuspendEmployeeRequest) (*UnsuspendEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsuspendEmployee not implemented")
}
func (UnimplementedHrServiceServer) GetEmployeeById(context.Context, *GetEmployeeRequest) (*GetEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeById not implemented")
}
func (UnimplementedHrServiceServer) mustEmbedUnimplementedHrServiceServer() {}

// UnsafeHrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HrServiceServer will
// result in compilation errors.
type UnsafeHrServiceServer interface {
	mustEmbedUnimplementedHrServiceServer()
}

func RegisterHrServiceServer(s grpc.ServiceRegistrar, srv HrServiceServer) {
	s.RegisterService(&HrService_ServiceDesc, srv)
}

func _HrService_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_CreateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).CreateEmployee(ctx, req.(*CreateEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SuspendEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SuspendEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SuspendEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SuspendEmployee(ctx, req.(*SuspendEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SackEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SackEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SackEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SackEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SackEmployee(ctx, req.(*SackEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_UnsuspendEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsuspendEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).UnsuspendEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_UnsuspendEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).UnsuspendEmployee(ctx, req.(*UnsuspendEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetEmployeeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetEmployeeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetEmployeeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetEmployeeById(ctx, req.(*GetEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HrService_ServiceDesc is the grpc.ServiceDesc for HrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrpb.HrService",
	HandlerType: (*HrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmployee",
			Handler:    _HrService_CreateEmployee_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _HrService_CreateDepartment_Handler,
		},
		{
			MethodName: "SuspendEmployee",
			Handler:    _HrService_SuspendEmployee_Handler,
		},
		{
			MethodName: "SackEmployee",
			Handler:    _HrService_SackEmployee_Handler,
		},
		{
			MethodName: "UnsuspendEmployee",
			Handler:    _HrService_UnsuspendEmployee_Handler,
		},
		{
			MethodName: "GetEmployeeById",
			Handler:    _HrService_GetEmployeeById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hrpb/api.proto",
}
